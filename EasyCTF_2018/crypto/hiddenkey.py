import binascii

n=26604911354263625624860199361988289298680496181540006936265880864050270986733876076648287104152177352550172722817868694079490384757268835287525673563491003458444709482450304315281195810250117382180072546864713532914088595563684426258691610839492426708922082844609005060007598875002458901669412670162963483566471192776774069559612235478861712174776967083934615967304509380128670235388033383280906608860155085317058559956004081246070329105142812419385811742909866564810356744924941098429601342841953583710758057034140030347437842370302100225672571427940920769672502903854457434298608266671190974921924701382418021644807
e=65537
c=18603450623817482640601770879270607863155824866758215131499187430151194700719242500392558023240630602167969573113422680765719184434803409507305155045745808430924151394607069124609853391993158768988818158182165769172472907826312852138291034137050905469172588246943760385379184055855814926510986401563764264945706273264615759680711547574868463935016376840854053826069272790302687686092513461781617663712302995177506752838157682162668055550399101919348668801110342573892978939455993883027784985739542184765065329681904428061370053766978097749267163132416901980945027444106799471798937911495589180076549690848290771652662
# equal to 2d + phi(n)
x=40611491705151793757892707084140385758273903871114977705785109505158751690081281760042337029454870109237824117532074769301497140411022388607413650049462746021069147758126378132974210428573504171892128989553167551653652487910508415138311316483556195247883869688491765967364392502788439942673726956117961867280423303001223107190415411828369274652522984755114103555268516261336407024807336681239765597685631681845322734124248639275163486025929907378580956826154448218754522168896771454934010783400785292357743269822905792509292007015144990205224588805957340521137313319730720456133483748059640465067443745636697017086466

# c^x mod n = c^{2d + phi(n)} mod n = c^{2d} mod n = m^2 mod n
m2 = pow(c, x, n)
print(m2)

def sqrt(x):
    (lower, upper) = (0, x)
    while lower < upper:
        mid = (lower + upper) // 2
        if mid*mid < x:
            lower = mid + 1
        else:
            upper = mid
    return lower

M = hex(sqrt(m2))[2:]
print(repr(M))
print(binascii.unhexlify(str(M)))
        
